DROP TABLE IF EXISTS Clients;

CREATE TABLE Clients (
ID_client VARCHAR(200) PRIMARY Key,
PhoneNum VARCHAR(200),
Birthday Date);

insert into Clients values ('01', '7-916-230-32-35',  '25-08-1980' );
insert into Clients values ('02', '7-903-543-32-11','13-02-1995' );
insert into Clients values ('03', '7-968-456-85-13', '15-08-2000' );
insert into Clients values ('04', '7-916-525-27-14','02-06-1979' );
insert into Clients values ('05', '7-968-853-37-15','09-11-2001' );
insert into Clients values ('06', '7-916-635-27-27', '23-08-1999' );
insert into Clients values ('07', '7-903-862-63-73', '01-07-1988' );
insert into Clients values ('08', '7-916-258-89-26','22-12-1975' );
insert into Clients values ('09', '7-968-269-32-83','03-09-2002' );
insert into Clients values ('010', '7-903-247-19-26', '15-03-1998' );
insert into Clients values ('011', '7-916-852-01-37','21-05-2001' );
insert into Clients values ('012', '7-916-824-00-00','25-08-2000' );
--SELECT * from Clients;

DROP TABLE IF EXISTS Departaments;

CREATE TABLE Departaments (
Amount INT,
Sales_plan INT,
Fact_of_sales INT DEFAULT 0,
DepNo VARCHAR(160) PRIMARY key);
insert into Departaments values (5,70000000 , 0 , '01Продажи');
insert into Departaments values (5,70000000 , 0 , '02Продажи');
insert into Departaments values (3,30000000 , 0 , '03Продажи');
insert into Departaments values (4,60000000 , 0 , '04Продажи');
insert into Departaments values (2,15000000 , 0 , '05Продажи');
--SELECT * from Departaments;


DROP TABLE IF EXISTS Employees;
--Создаем таблицу Сотрудники
CREATE TABLE Employees (
ID_employee VARCHAR(180),
Name VARCHAR(180) NOT NULL,
Position VARCHAR(100),
Salary INT,
Sex VARCHAR(3),
DepNo VARCHAR(160) REFERENCES Departaments(DepNo),
PRIMARY KEY (ID_employee, DepNo),
CHECK (Sex IN ('м', 'ж')),
FOREIGN KEY (DepNo) REFERENCES Departaments (DepNo));

insert into Employees values ('101','Петров Иван', 'генеральный директор' , 200000, 'м',  '01Продажи');
insert into Employees values ('301','Александрова Алина', 'менеджер по продажам' , 100000, 'ж',  '03Продажи');
insert into Employees values ('201','Мельников Андрей', 'менеджер по продажам' , 25000, 'м',  '02Продажи');
insert into Employees values ('302','Филимонов Андрей', 'менеджер по продажам' , 250000, 'м',  '03Продажи');
insert into Employees values ('102','Андреева Анна', 'менеджер по продажам' , 250000, 'ж',  '01Продажи');
insert into Employees values ('303','Карпов Тихон', 'менеджер по продажам' , 300000, 'м',  '03Продажи');
insert into Employees values ('401','Некрасов Дмитрий', 'менеджер по продажам' , 40000, 'м',  '04Продажи');
Insert into Employees values ('402','Иванов Максим', 'менеджер по продажам' , 200000, 'м',  '04Продажи');
insert into Employees values ('103','Орлов Максим', 'менеджер по продажам' , 30000, 'м',  '01Продажи');
insert into Employees values ('202','Касаткина Милана', 'менеджер по продажам' , 30000, 'ж',  '02Продажи');
insert into Employees values ('403','Тарасов Артем', 'менеджер по продажам' , 200000, 'м',  '04Продажи');
insert into Employees values ('501','Сизова Екатерина', 'менеджер по продажам' , 20000, 'ж',  '05Продажи');
insert into Employees values ('502','Фокин Виктор', 'менеджер по продажам' , 30000, 'м',  '05Продажи');
insert into Employees values ('404','Борисова Мария', 'менеджер по продажам' , 27000, 'ж',  '04Продажи');
insert into Employees values ('104','Грекова Елена', 'менеджер по продажам' , 35000, 'ж',  '01Продажи');
insert into Employees values ('203','Золотова Евгения', 'менеджер по продажам' , 35000, 'ж',  '02Продажи');
insert into Employees values ('204','Маслова Анастасия', 'менеджер по продажам' , 20000, 'ж',  '02Продажи');
insert into Employees values ('105','Корнеев Виктор', 'менеджер по продажам' , 25000, 'м',  '01Продажи');
insert into Employees values ('205','Сергеев Филипп', 'менеджер по продажам' , 35000, 'м',  '02Продажи');

--SELECT * from Employees;

DROP TABLE IF EXISTS Car_types;
 
CREATE TABLE Car_types(
Id_car VARCHAR(180) PRIMARY KEY,
typecar VARCHAR(180) NOT NULL,
lft INT,
rgt INT,
CHECK (lft > 0),
CHECK (rgt > 1),
CHECK (lft < rgt)
);

--SELECT * from Car_types;

insert into Car_types values ('1', 'Sedan', 1, 8);
INSERT INTO Car_types VALUES ('4', 'All-Wheel Drive', 2, 3);
INSERT INTO Car_types VALUES ('5', 'Rear-Wheel Drive', 4, 5);
INSERT INTO Car_types VALUES ('6', 'Front-Wheel Drive', 6, 7);
insert into Car_types values ('2', 'Hatchback', 9, 16);
INSERT INTO Car_types VALUES ('7', 'All-Wheel Drive', 10, 11);
INSERT INTO Car_types VALUES ('8', 'Rear-Wheel Drive', 12, 13);
INSERT INTO Car_types VALUES ('9', 'Front-Wheel Drive', 14, 15);
insert into Car_types values ('3', 'Jeep', 17, 24);
INSERT INTO Car_types VALUES ('10', 'All-Wheel Drive', 18, 19);
INSERT INTO Car_types VALUES ('11', 'Rear-Wheel Drive', 20, 21);
INSERT INTO Car_types VALUES ('12', 'Front-Wheel Drive', 22, 23);

--SELECT * from Car_types;

DROP TABLE IF EXISTS car_mark;

CREATE TABLE car_mark (
Id_mark INT,
Id_car VARCHAR(180),
Mark VARCHAR(100),
cost INT,
Quantity INT,
PRIMARY KEY (id_mark, id_car),
FOREIGN KEY (Id_car) REFERENCES car_types(Id_car)
);

insert into car_mark values (1, '4', 'Audi', 5000000, 6);
insert into car_mark values (2, '10', 'BMW', 10000000, 3);
insert into car_mark values (3, '7', 'Volkswagen', 4000000, 15);
insert into car_mark values (4, '8', 'Lada', 1000000, 16);
insert into car_mark values (5, '8', 'Renault', 1500000, 12);
insert into car_mark values (6, '10', 'Audi', 8500000, 9);
insert into car_mark values (7, '6', 'Jaguar', 5500000, 10);
insert into car_mark values (8, '5', 'KIA', 2500000, 11);
insert into car_mark values (9, '12', 'HAVAL', 3000000, 11);
insert into car_mark values (10, '9', 'BMW', 3300000, 5);
insert into car_mark values (11, '11', 'Geely', 2700000, 16);
insert into car_mark values (12, '5', 'Volkswagen', 2600000, 12);
insert into car_mark values (13, '4', 'Mercedes', 8000000, 3);
insert into car_mark values (14, '7', 'Hyundai', 6000000, 4);
insert into car_mark values (15, '10', 'Mercedes', 1100000, 4);
insert into car_mark values (16, '4', 'BMW', 12000000, 2);
insert into car_mark values (17, '10', 'Land Rover', 4500000, 6);

--SELECT * from car_mark;

DROP TABLE IF EXISTS Deals;

CREATE TABLE Deals (
Id_deal VARCHAR(200) PRIMARY KEY,
ID_client VARCHAR(200) ,
ID_employee VARCHAR(180),
Id_mark INT,
Sale_date Date,
Amount INT,
CHECK (Amount > 0),
FOREIGN KEY (ID_client) REFERENCES Clients(ID_client),
FOREIGN KEY (ID_employee) REFERENCES Employees(ID_employee),
FOREIGN KEY (Id_mark) REFERENCES car_mark(Id_mark)
);

insert into Deals values ('001', '02', '301', 9, '11-08-2023', 1);
insert into Deals values ('002', '010', '502', 5, '12-07-2023', 2);
insert into Deals values ('003', '012', '403', 8, '17-12-2023', 3);
insert into Deals values ('004', '03', '103', 10, '16-12-2023', 4);
insert into Deals values ('005', '01', '105', 11,'18-01-2023', 8);
insert into Deals values ('006', '05', '205', 12, '21-01-2023', 1);
insert into Deals values ('007', '012', '302', 7, '29-04-2023', 3);
insert into Deals values ('008', '04', '401', 6, '15-10-2023', 1);
insert into Deals values ('009', '06', '202', 5, '10-11-2023', 2);
insert into Deals values ('0010', '08', '403', 8, '03-03-2023', 4);
insert into Deals values ('0011', '09', '204', 9, '01-02-2023', 2);
insert into Deals values ('0012', '06', '201', 10, '18-07-2023', 1);
insert into Deals values ('0013', '07', '402', 2, '03-08-2023', 1);
insert into Deals values ('0014', '01', '202', 13,'11-06-2023', 3);
insert into Deals values ('0015', '012', '203', 3, '10-01-2023', 1);
insert into Deals values ('0016', '01', '104', 14, '04-02-2023', 2);
insert into Deals values ('0017', '04', '404', 1, '02-12-2023', 3);
insert into Deals values ('0018', '07', '501', 15,'06-09-2023', 1);
insert into Deals values ('0019', '09', '303', 17, '08-11-2023', 1);
insert into Deals values ('0020', '02', '102', 16, '09-04-2023', 2);
insert into Deals values ('0021', '05', '401', 6, '13-12-2023', 1);
--SELECT * from Deals;

--Наши запросы
--Запрос 1
--В таблице Departaments у нас есть столбец Fact_of_sales, который нужно заполнить. То есть мы хотим отследить 
--за 2023 год на какую сумму осуществлялись продажи для каждого из отдела. Для этого нужно отследить количество 
--проданных автомобителей для каждого сотрудника из таблицы Deals и умножить на стоимость машины из таблицы
--car_mark. Также не забыть о том, что каждый сотрудник мог совершить более одной сделки и в каждом отделе работает
--несколько сотрудников.
UPDATE Departaments
SET Fact_of_sales = (
    SELECT SUM(deal.Amount * cm.cost)
    FROM Deals deal
    INNER JOIN car_mark cm ON deal.Id_mark = cm.Id_mark
    INNER JOIN Employees e ON deal.ID_employee = e.ID_employee
    WHERE e.DepNo = Departaments.DepNo
    GROUP BY e.DepNo
);

SELECT * from Departaments;

--Запрос 2
--Добавляем стобец summ_count в Employee, чтобы посчитать сумму на которые заключили сделки сотрудники
ALTER TABLE Employees add COLUMN summ_count int DEFAULT 0;

SELECT * from Employees;

--Отобразить на какую сумму продал автомобили каждый из сотрудников.
UPDATE Employees
set summ_count = (
  SELECT SUM(d.Amount * cm.cost) AS 'Сумма_продаж'
  FROM Deals d
  INNER JOIN car_mark cm ON d.Id_mark = cm.Id_mark
  INNER JOIN Employees e ON d.ID_employee = e.ID_employee
  WHERE Employees.ID_employee = d.ID_employee
);
--Выводим сотрудников без NULL в summ_coint
SELECT * from Employees 
WHERE Employees.summ_count is not NULL;

--Запрос 3
--Посчитали, какой процент плана продаж выполнил каждый работник по отделам
SELECT e.id_employee, e.name, e.depno, e.summ_count, d.sales_plan,
ROUND((CAST(e.summ_count as FLOAT) / d.sales_plan) * 100, 2) AS percentage
FROM Departaments d 
INNER JOIN Employees e ON e.DepNo = d.DepNo
WHERE e.summ_count IS NOT NULL
ORDER BY percentage Asc;
select * From Employees;
--Запрос 4
--Теперь нужно посчитать чистую прибыль компании на данный момент. Для этого нужно сложить 
--суммы всех проданных машин по отделам в качестве доходов, посчитать суммы всех зарплат и вычесть их
-- из прибыли и вычесть также остальные издержки( на оборудование, аренду и другое). Условно будет считать
-- все остальные издержки равными 4 000 000.
select SUM(d.fact_of_sales) - SUM(e.Salary) - 4000000 As "Чистая прибыль компании"
from Departaments d
NATURAL join Employees e;
--880848000
--Запрос 5
--Начинаем подбирать оптимальную бонусную систему
-- Начнем с самой простой. К зарплатам сотрудников отдела продаж будем добавлять 2% от суммы проданных машин
ALTER TABLE Employees add COLUMN new_salary int DEFAULT 0;

UPDATE Employees
  set new_salary = Salary + (summ_count * 0.02 );

select * From Employees;
-- Снова посчитаем выручку компании
select SUM(d.fact_of_sales) - SUM(e.new_salary) - 4000000 As "Чистая прибыль компании"
from Departaments d
NATURAL join Employees e;
--877022000
-- Запрос 6
-- Попробуем другую бонусную систему. Будем действовать по формеле Зарплата = Fn + (Факт продаж - Rмин) * Kn
-- Идея такая : мы поделим всех сотрудников по диапазонам продаж( Rmin и Rmax). Для каждого диапазона будет создан свой 
-- коэфициент Kn и своя констаната Fn. 
-- Добавляем новый столбец salary1
ALTER TABLE Employees ADD COLUMN salary1 INT DEFAULT 0;
UPDATE Employees
SET salary1 = CASE
    WHEN summ_count >= 1 AND summ_count <= 3500000 THEN 0 + (summ_count - 1) * 0.1
    WHEN summ_count > 3500000 AND summ_count <= 10000000 THEN 80000 + (summ_count - 3500001) * 0.08
    WHEN summ_count > 10000000 AND summ_count <= 20000000 THEN 120000 + (summ_count - 10000001) * 0.05
    WHEN summ_count > 20000000 AND summ_count <= 30000000 THEN 150000 + (summ_count - 20000001) * 0.03
    ELSE 20000 + (summ_count - 30000001) * 0.01
END;
select *FROM Employees;
-- Считаем чистую прибыль компании
select SUM(d.fact_of_sales) - SUM(e.salary1) - 4000000 As "Чистая прибыль компании"
from Departaments d
NATURAL join Employees e;
-- 877132001.21
-- Заметим, что в последнем случае мы получили максимальную прибыль, а это значит, что бонусная система
-- напрямую влияет на прибыль компании
